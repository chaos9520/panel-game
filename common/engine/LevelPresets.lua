-- this file documents presets for level data
local LevelData = require("common.engine.LevelData")

---@type LevelData[]
local modern = {}
modern[1] = LevelData()
modern[1] :setStartingSpeed(85)
          :setSpeedIncreaseMode(LevelData.SPEED_INCREASE_MODES.TIME_INTERVAL)
          :setShockFrequency(17)
          :setShockCap(14)
          :setColorCount(4)
          :setMaxHealth(159)
          :setGarbageMargin(12)
          :setStopFormula(LevelData.STOP_FORMULAS.MODERN)
          :setStopComboConstant(117)
          :setStopChainConstant(140)
          :setStopDangerConstant(168)
          :setStopCoefficient(14)
          :setStopDangerCoefficient(17)
          :setHover(14)
          :setGarbageHover(46)
          :setFlash(60)
          :setFace(20)
          :setPop(10)

modern[2] = LevelData()
modern[2] :setStartingSpeed(86)
          :setSpeedIncreaseMode(LevelData.SPEED_INCREASE_MODES.TIME_INTERVAL)
          :setShockFrequency(21)
          :setShockCap(13)
          :setColorCount(5)
          :setMaxHealth(122)
          :setGarbageMargin(16)
          :setStopFormula(LevelData.STOP_FORMULAS.MODERN)
          :setStopComboConstant(106)
          :setStopChainConstant(128)
          :setStopDangerConstant(153)
          :setStopCoefficient(11)
          :setStopDangerCoefficient(14)
          :setHover(12)
          :setGarbageHover(35)
          :setFlash(54)
          :setFace(19)
          :setPop(10)

modern[3] = LevelData()
modern[3] :setStartingSpeed(87)
          :setSpeedIncreaseMode(LevelData.SPEED_INCREASE_MODES.TIME_INTERVAL)
          :setShockFrequency(25)
          :setShockCap(12)
          :setColorCount(5)
          :setMaxHealth(94)
          :setGarbageMargin(19)
          :setStopFormula(LevelData.STOP_FORMULAS.MODERN)
          :setStopComboConstant(97)
          :setStopChainConstant(116)
          :setStopDangerConstant(139)
          :setStopCoefficient(9)
          :setStopDangerCoefficient(11)
          :setHover(11)
          :setGarbageHover(27)
          :setFlash(49)
          :setFace(17)
          :setPop(9)

modern[4] = LevelData()
modern[4] :setStartingSpeed(88)
          :setSpeedIncreaseMode(LevelData.SPEED_INCREASE_MODES.TIME_INTERVAL)
          :setShockFrequency(30)
          :setShockCap(11)
          :setColorCount(6)
          :setMaxHealth(72)
          :setGarbageMargin(22)
          :setStopFormula(LevelData.STOP_FORMULAS.MODERN)
          :setStopComboConstant(88)
          :setStopChainConstant(105)
          :setStopDangerConstant(126)
          :setStopCoefficient(7)
          :setStopDangerCoefficient(9)
          :setHover(9)
          :setGarbageHover(21)
          :setFlash(45)
          :setFace(15)
          :setPop(9)


modern[5] = LevelData()
modern[5] :setStartingSpeed(89)
          :setSpeedIncreaseMode(LevelData.SPEED_INCREASE_MODES.TIME_INTERVAL)
          :setShockFrequency(31)
          :setShockCap(10)
          :setColorCount(5)
          :setMaxHealth(56)
          :setGarbageMargin(23)
          :setStopFormula(LevelData.STOP_FORMULAS.MODERN)
          :setStopComboConstant(80)
          :setStopChainConstant(96)
          :setStopDangerConstant(115)
          :setStopCoefficient(6)
          :setStopDangerCoefficient(7)
          :setHover(8)
          :setGarbageHover(16)
          :setFlash(41)
          :setFace(14)
          :setPop(8)

modern[6] = LevelData()
modern[6] :setStartingSpeed(90)
          :setSpeedIncreaseMode(LevelData.SPEED_INCREASE_MODES.TIME_INTERVAL)
          :setShockFrequency(35)
          :setShockCap(9)
          :setColorCount(6)
          :setMaxHealth(43)
          :setGarbageMargin(26)
          :setStopFormula(LevelData.STOP_FORMULAS.MODERN)
          :setStopComboConstant(73)
          :setStopChainConstant(87)
          :setStopDangerConstant(105)
          :setStopCoefficient(5)
          :setStopDangerCoefficient(6)
          :setHover(7)
          :setGarbageHover(17)
          :setFlash(37)
          :setFace(13)
          :setPop(8)


modern[7] = LevelData()
modern[7] :setStartingSpeed(92)
          :setSpeedIncreaseMode(LevelData.SPEED_INCREASE_MODES.TIME_INTERVAL)
          :setShockFrequency(36)
          :setShockCap(8)
          :setColorCount(5)
          :setMaxHealth(33)
          :setGarbageMargin(27)
          :setStopFormula(LevelData.STOP_FORMULAS.MODERN)
          :setStopComboConstant(66)
          :setStopChainConstant(79)
          :setStopDangerConstant(95)
          :setStopCoefficient(4)
          :setStopDangerCoefficient(5)
          :setHover(6)
          :setGarbageHover(9)
          :setFlash(33)
          :setFace(12)
          :setPop(7)

modern[8] = LevelData()
modern[8] :setStartingSpeed(92)
          :setSpeedIncreaseMode(LevelData.SPEED_INCREASE_MODES.TIME_INTERVAL)
          :setShockFrequency(40)
          :setShockCap(8)
          :setColorCount(6)
          :setMaxHealth(25)
          :setGarbageMargin(30)
          :setStopFormula(LevelData.STOP_FORMULAS.MODERN)
          :setStopComboConstant(60)
          :setStopChainConstant(72)
          :setStopDangerConstant(86)
          :setStopCoefficient(3)
          :setStopDangerCoefficient(4)
          :setHover(5)
          :setGarbageHover(7)
          :setFlash(30)
          :setFace(11)
          :setPop(7)

modern[9] = LevelData()
modern[9] :setStartingSpeed(93)
          :setSpeedIncreaseMode(LevelData.SPEED_INCREASE_MODES.TIME_INTERVAL)
          :setShockFrequency(43)
          :setShockCap(7)
          :setColorCount(7)
          :setMaxHealth(20)
          :setGarbageMargin(32)
          :setStopFormula(LevelData.STOP_FORMULAS.MODERN)
          :setStopComboConstant(55)
          :setStopChainConstant(65)
          :setStopDangerConstant(79)
          :setStopCoefficient(2)
          :setStopDangerCoefficient(3)
          :setHover(4)
          :setGarbageHover(6)
          :setFlash(27)
          :setFace(10)
          :setPop(7)

modern[10] = LevelData()
modern[10]:setStartingSpeed(94)
          :setSpeedIncreaseMode(LevelData.SPEED_INCREASE_MODES.TIME_INTERVAL)
          :setShockFrequency(41)
          :setShockCap(6)
          :setColorCount(5)
          :setMaxHealth(15)
          :setGarbageMargin(30)
          :setStopFormula(LevelData.STOP_FORMULAS.MODERN)
          :setStopComboConstant(50)
          :setStopChainConstant(60)
          :setStopDangerConstant(71)
          :setStopCoefficient(2)
          :setStopDangerCoefficient(3)
          :setHover(4)
          :setGarbageHover(4)
          :setFlash(25)
          :setFace(9)
          :setPop(6)

modern[11] = LevelData()
modern[11]:setStartingSpeed(95)
          :setSpeedIncreaseMode(LevelData.SPEED_INCREASE_MODES.TIME_INTERVAL)
          :setShockFrequency(45)
          :setShockCap(6)
          :setColorCount(6)
          :setMaxHealth(12)
          :setGarbageMargin(33)
          :setStopFormula(LevelData.STOP_FORMULAS.MODERN)
          :setStopComboConstant(45)
          :setStopChainConstant(54)
          :setStopDangerConstant(65)
          :setStopCoefficient(2)
          :setStopDangerCoefficient(3)
          :setHover(4)
          :setGarbageHover(3)
          :setFlash(23)
          :setFace(8)
          :setPop(6)

---@type (table<number | string, LevelData>)
local classic = {}
classic[1] = LevelData()
classic[1]:setStartingSpeed(1)
          :setSpeedIncreaseMode(LevelData.SPEED_INCREASE_MODES.CLEARED_PANEL_COUNT)
          :setShockCap(0)
          -- game prep code and replay loading code needs to check for game mode and override
          -- endless has only 5 colors on the lowest classic difficulty
          :setColorCount(4)
          :setMaxHealth(1)
          :setStopFormula(LevelData.STOP_FORMULAS.CLASSIC)
          :setStopComboConstant(120)
          :setStopChainConstant(150)
          :setStopDangerConstant(180)
          :setStopCoefficient(0)
          :setStopDangerCoefficient(0)
          :setHover(14)
          :setFlash(53)
          :setFace(18)
          :setPop(9)
classic.easy = classic[1]

classic[2] = LevelData()
classic[2]:setStartingSpeed(1)
          :setSpeedIncreaseMode(LevelData.SPEED_INCREASE_MODES.CLEARED_PANEL_COUNT)
          :setShockCap(0)
          :setColorCount(5)
          :setMaxHealth(1)
          :setStopFormula(LevelData.STOP_FORMULAS.CLASSIC)
          :setStopComboConstant(90)
          :setStopChainConstant(113)
          :setStopDangerConstant(135)
          :setStopCoefficient(0)
          :setStopDangerCoefficient(0)
          :setHover(9)
          :setFlash(40)
          :setFace(14)
          :setPop(8)
classic.normal = classic[2]

classic[3] = LevelData()
classic[3]:setStartingSpeed(1)
          :setSpeedIncreaseMode(LevelData.SPEED_INCREASE_MODES.CLEARED_PANEL_COUNT)
          :setShockCap(0)
          :setColorCount(6)
          :setMaxHealth(1)
          :setStopFormula(LevelData.STOP_FORMULAS.CLASSIC)
          :setStopComboConstant(60)
          :setStopChainConstant(75)
          :setStopDangerConstant(90)
          :setStopCoefficient(0)
          :setStopDangerCoefficient(0)
          :setHover(6)
          :setFlash(30)
          :setFace(10)
          :setPop(7)
classic.hard = classic[3]

classic[4] = LevelData()
classic[4]:setStartingSpeed(1)
          :setSpeedIncreaseMode(LevelData.SPEED_INCREASE_MODES.CLEARED_PANEL_COUNT)
          :setShockCap(0)
          :setColorCount(7)
          :setMaxHealth(1)
          :setStopFormula(LevelData.STOP_FORMULAS.CLASSIC)
          :setStopComboConstant(30)
          :setStopChainConstant(45)
          :setStopDangerConstant(60)
          :setStopCoefficient(0)
          :setStopDangerCoefficient(0)
          :setHover(4)
          :setFlash(22)
          :setFace(8)
          :setPop(7)
classic.ex = classic[4]

local LevelPresets = {}

---@param level number
---@return LevelData # a deepcopy of the modern preset
function LevelPresets.getModern(level)
  assert(modern[level], "trying to load inexistent level preset" .. level)
  return deepcpy(modern[level])
end

LevelPresets.modernPresetCount = #modern

---@param difficulty number | string the difficulty expressed as index 1 2 3 4 or easy normal hard ex 
---@return LevelData # a deepcopy of the classic preset
function LevelPresets.getClassic(difficulty)
  assert(classic[difficulty], "trying to load inexistent difficulty preset" .. difficulty)
  return deepcpy(classic[difficulty])
end

LevelPresets.classicPresetCount = #classic

return LevelPresets